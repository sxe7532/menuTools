#lambda_function.py

import boto3
import os
import json
import requests

SLACK_CHANNEL_ID = "xxxxxx"

HEADERS = {
    'Accept': 'application/json',
    'Content-type': 'application/json',
}

tools = [
    {
        "ID": "1",
        "Name": "NewHireAssistantBot",
        "About": "Creates a google account for all new hires and send the new hires a welcome email with information on how to access their account.",
        "Lambda": "https link",
        "Logs": "https link",
        "IAM Role": "https link",
        "Secret Parameters": "https link",
    },
    {
        "ID": "2",
        "Name": "Activate Me",
        "About": "Re-activates the google account of a user whose account has been suspended.",
        "Lambda": "",
        "Logs": "https link",
        "IAM Role": "https link",

    },
    {
        "ID": "3",
        "Name": "Jamf",
        "About": "Searches and analyses devices in Jamf. Run /jamf-help to see all the options.",
        "Lambda": "https link",
        "Logs": "https link",
        "IAM Role": "https link",
        "Secret Parameters": "https link",
    },
    {
        "ID": "4",
        "Name": "New Hire Workday Assistant Bot",
        "About": "Creates a google account for all new hires and sends the new hires a welcome email with information on how to access their account.",
        "Lambda": "https link",
        "Logs": "https link",
        "IAM Role": "https link",
        "Secret Parameters": "https link",
    },
    {
        "ID": "5",
        "Name": "Jamf Manage Alerts",
        "About": "Suppresses Alerts on Devices that are Sent for Repair or Waiting to be Returned.",
        "Lambda": "https link",
        "Logs": "https link",
        "IAM Role": "https link",
        "Secret Parameters": "https link",
    },
    {
        "ID": "6",
        "Name": "IT Terminator App",
        "About": "Terminates an employee who is leaving the company.",
        "Lambda": "https link",
        "Logs": "https link",
        "IAM Role": "https link",
        "Secret Parameters": "https link",
    },
    {
        "ID": "7",
        "Name": "Auth0 Employee Sync",
        "About": "Updates an employee's Slack. Gsuite, Jamf and Jira profile based on their HR profile.",
        "Lambda": "https link",
        "Logs": "https link",
        "IAM Role": "https link",
        "Secret Parameters": "https link",
        "GitHub": "https link"
    },
    {
        "ID": "8",
        "Name": "Employee Sync Retry",
        "About": "Sometimes the Employee Sync Chron Job fails to update an employee's Slack. Gsuite, Jamf or Jira profile. Run the /retry tool to run the Employee Sync again on a specific user or group.",
        "Lambda": "https link",
        "Logs": "https link",
        "IAM Role": "https link",
        "Secret Parameters": "https link",
    },
    {
        "ID": "9",
        "Name": "Employee GroupSync",
        "About": "View, add or remove google group mappings so that employees are automatically added in google groups based on their department, country, etc.",
        "Lambda": "https link",
        "Logs": "https link",
        "IAM Role": "https link",
        "Secret Parameters": "https link",
    }
]


def lambda_handler(event, context):
    response_json = {}

    data_from_slack = event["Records"][0]["Sns"]["Message"]

    json_loaded_data = json.loads(data_from_slack)

    if "type" in json_loaded_data and json_loaded_data["type"] == "block_actions":
        runOptions(json_loaded_data)
    else:
        response_url = json_loaded_data["response_url"]
        channel_id = json_loaded_data["channel_id"]

        if (channel_id == SLACK_CHANNEL_ID):
            runMenu(response_url)
        else:
            response_text = ":warning: You must use `/menutools` while inside an authorized channel."
            response_json["text"] = response_text
            response = requests.post(
                response_url, data=json.dumps(response_json),
                headers={'Content-Type': 'application/json'}
            )


def runOptions(json_loaded_data):
    response_json = {}
    response_text = ""
    response_url = json_loaded_data["response_url"]
    option = json_loaded_data["actions"][0]["selected_option"]["text"]["text"]

    if "+" in option:
        option = option.replace("+", " ")
    tool_id = json_loaded_data["actions"][0]["action_id"]

    for key in tools[0].keys():
        if option == key:
            for tool in tools:
                if tool_id == tool["ID"]:
                    response_text = tool[key]

    response_json["text"] = response_text
    response = requests.post(
        response_url, data=json.dumps(response_json),
        headers={'Content-Type': 'application/json'}
    )


def runMenu(response_url):
    response_json = {}

    blocks = [
        {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": "IT Tools Menu"
            }
        },
        {
            "type": "divider"

        }
    ]

    for tool in tools:
        new_block = {
            "type": "section",
            "text": {"type": "mrkdwn", "text": tool["Name"]},
            "accessory": {
                "type": "static_select",
                "action_id": tool["ID"],
                "placeholder": {
                    "type": "plain_text",
                    "emoji": True,
                    "text": "Select Action"
                },
                "options": []
            }
        }

        for key in tool.keys():
            if key == "Name" or key == "ID":
                continue
            
            option = {
                "text": {
                    "type": "plain_text",
                    "emoji": True,
                    "text": key
                },
                "value": key
            }
            
            new_block["accessory"]["options"].append(option)
            
        blocks.append(new_block)

    response_json['blocks'] = blocks
    # TODO implement 

    response = requests.post(
        response_url, data=json.dumps(response_json),
        headers={'Content-Type': 'application/json'}
    )
